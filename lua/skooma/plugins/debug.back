return {
	"mfussenegger/nvim-dap",
	dependencies = {
		"rcarriga/nvim-dap-ui",
		"mfussenegger/nvim-dap-python",
		"nvim-neotest/nvim-nio",
	},
	config = function()
		local dap, dapui = require("dap"), require("dapui")
		dap.listeners.before.attach.dapui_config = function()
			dapui.open()
		end
		dap.listeners.before.launch.dapui_config = function()
			dapui.open()
		end
		dap.listeners.before.event_terminated.dapui_config = function()
			dapui.close()
		end
		dap.listeners.before.event_exited.dapui_config = function()
			dapui.close()
		end

		local py_db_path = "/home/dmitry/.local/share/nvim/mason/packages/debugpy/venv/bin/python3"

		--cpptools

		-- local cpp_db_path =
		-- 	"/home/dmitry/.local/share/nvim/mason/packages/cpptools/extension/debugAdapters/bin/OpenDebugAD7" --cpptools
		--
		-- dap.adapters.cppdbg = {
		-- 	id = "cppdbg",
		-- 	type = "executable",
		-- 	command = cpp_db_path,
		-- }
		--
		-- dap.configurations.cpp = {
		-- 	{
		-- 		name = "Launch file",
		-- 		type = "cppdbg",
		-- 		request = "launch",
		-- 		program = function()
		-- 			return vim.fn.input("Path to executable: ", vim.fn.getcwd() .. "/", "file")
		-- 		end,
		-- 		cwd = "${workspaceFolder}",
		-- 		stopAtEntry = true,
		-- 	},
		-- 	{
		-- 		name = "Attach to gdbserver :1234",
		-- 		type = "cppdbg",
		-- 		request = "launch",
		-- 		MIMode = "gdb",
		-- 		miDebuggerServerAddress = "localhost:1234",
		-- 		miDebuggerPath = "/usr/bin/gdb",
		-- 		cwd = "${workspaceFolder}",
		-- 		program = function()
		-- 			return vim.fn.input("Path to executable: ", vim.fn.getcwd() .. "/", "file")
		-- 		end,
		-- 	},
		-- }
		--
		-- dap.configurations.c = dap.configurations.cpp

		--codelldb

		-- local lldb_path = "/home/dmitry/.local/share/nvim/mason/bin/codelldb"
		--
		-- dap.adapters.codelldb = {
		-- 	type = "server",
		-- 	port = "${port}",
		-- 	host = "127.0.0.1",
		-- 	executable = {
		-- 		command = lldb_path,
		-- 		args = { "--port", "${port}" },
		-- 	},
		-- }
		--
		-- dap.configurations.cpp = {
		-- 	{
		-- 		name = "Launch file",
		-- 		type = "codelldb",
		-- 		request = "launch",
		-- 		program = function()
		-- 			return vim.fn.input("Path to executable: ", vim.fn.getcwd() .. "/", "file")
		-- 		end,
		-- 		cwd = "${workspaceFolder}",
		-- 		stopOnEntry = false,
		-- 		runInTerminal = false,
		-- 	},
		-- }
		-- require("dap").set_log_level("DEBUG")
		--
		-- dap.configurations.c = dap.configurations.cpp
		-- dap.configurations.rust = dap.configurations.cpp
		--
		-- dap.adapters.lldb = {
		-- 	type = "executable",
		-- 	command = lldb_path, -- adjust as needed, must be absolute path
		-- 	name = "lldb",
		-- }
		-- local dap = require("dap")
		-- dap.configurations.c = {
		-- 	{
		-- 		name = "Launch",
		-- 		type = "lldb",
		-- 		request = "launch",
		-- 		program = function()
		-- 			return vim.fn.input("Path to executable: ", vim.fn.getcwd() .. "/", "file")
		-- 		end,
		-- 		cwd = "${workspaceFolder}",
		-- 		stopOnEntry = false,
		-- 		args = {},
		--
		-- 		-- ðŸ’€
		-- 		-- if you change `runInTerminal` to true, you might need to change the yama/ptrace_scope setting:
		-- 		--
		-- 		--    echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope
		-- 		--
		-- 		-- Otherwise you might get the following error:
		-- 		--
		-- 		--    Error on launch: Failed to attach to the target process
		-- 		--
		-- 		-- But you should be aware of the implications:
		-- 		-- https://www.kernel.org/doc/html/latest/admin-guide/LSM/Yama.html
		-- 		-- runInTerminal = false,
		-- 	},
		-- }

		--gdb
		dap.adapters.gdb = {
			type = "executable",
			command = "gdb",
			args = { "--interpreter=dap", "--eval-command", "set print pretty on" },
		}
		dap.configurations.c = {
			{
				name = "Launch",
				type = "gdb",
				request = "launch",
				program = function()
					return vim.fn.input("Path to executable: ", vim.fn.getcwd() .. "/", "file")
				end,
				cwd = "${workspaceFolder}",
				stopAtBeginningOfMainSubprogram = false,
			},
			{
				name = "Select and attach to process",
				type = "gdb",
				request = "attach",
				program = function()
					return vim.fn.input("Path to executable: ", vim.fn.getcwd() .. "/", "file")
				end,
				pid = function()
					local name = vim.fn.input("Executable name (filter): ")
					return require("dap.utils").pick_process({ filter = name })
				end,
				cwd = "${workspaceFolder}",
			},
			{
				name = "Attach to gdbserver :1234",
				type = "gdb",
				request = "attach",
				target = "localhost:1234",
				program = function()
					return vim.fn.input("Path to executable: ", vim.fn.getcwd() .. "/", "file")
				end,
				cwd = "${workspaceFolder}",
			},
		}

		--pydb

		-- require("dap-python").setup("python3") --Use local debugger
		require("dap-python").setup(py_db_path) --Use Mason debugger
		require("dapui").setup()
		--To install manually:
		-- dap.adapters.python = function(cb, config)
		-- 	if config.request == "attach" then
		-- 		---@diagnostic disable-next-line: undefined-field
		-- 		local port = (config.connect or config).port
		-- 		---@diagnostic disable-next-line: undefined-field
		-- 		local host = (config.connect or config).host or "127.0.0.1"
		-- 		cb({
		-- 			type = "server",
		-- 			port = assert(port, "`connect.port` is required for a python `attach` configuration"),
		-- 			host = host,
		-- 			options = {
		-- 				source_filetype = "python",
		-- 			},
		-- 		})
		-- 	else
		-- 		cb({
		-- 			type = "executable",
		-- 			command = "path/to/virtualenvs/debugpy/bin/python",
		-- 			args = { "-m", "debugpy.adapter" },
		-- 			options = {
		-- 				source_filetype = "python",
		-- 			},
		-- 		})
		-- 	end
		-- end
		--
		vim.keymap.set("n", "<F5>", function()
			require("dap").continue()
		end)
		vim.keymap.set("n", "<F10>", function()
			require("dap").step_over()
		end)
		vim.keymap.set("n", "<F11>", function()
			require("dap").step_into()
		end)
		vim.keymap.set("n", "<F12>", function()
			require("dap").step_out()
		end)
		vim.keymap.set("n", "<Leader>b", function()
			require("dap").toggle_breakpoint()
		end)
		vim.keymap.set("n", "<Leader>B", function()
			require("dap").set_breakpoint()
		end)
		vim.keymap.set("n", "<Leader>lp", function()
			require("dap").set_breakpoint(nil, nil, vim.fn.input("Log point message: "))
		end)
		vim.keymap.set("n", "<Leader>dr", function()
			require("dap").repl.open()
		end)
		vim.keymap.set("n", "<Leader>dl", function()
			require("dap").run_last()
		end)
		vim.keymap.set({ "n", "v" }, "<Leader>dh", function()
			require("dap.ui.widgets").hover()
		end)
		vim.keymap.set({ "n", "v" }, "<Leader>dp", function()
			require("dap.ui.widgets").preview()
		end)
		vim.keymap.set("n", "<Leader>df", function()
			local widgets = require("dap.ui.widgets")
			widgets.centered_float(widgets.frames)
		end)
		vim.keymap.set("n", "<Leader>ds", function()
			local widgets = require("dap.ui.widgets")
			widgets.centered_float(widgets.scopes)
		end)
	end,
}
